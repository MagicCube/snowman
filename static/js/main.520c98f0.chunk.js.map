{"version":3,"sources":["components/Header.tsx","dapp.png","eth.png","components/BalanceMsg.tsx","components/yourWallet/WalletBalance.tsx","components/yourWallet/StakeForm.tsx","hooks/useStakeTokens.ts","components/yourWallet/UnStakeForm.tsx","hooks/useUnStakeTokens.ts","components/yourWallet/ContractBalance.tsx","components/yourWallet/YourWallet.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","display","justifyContent","gap","Header","classes","useEthers","account","activateBrowserWallet","deactivate","isConnected","undefined","className","Button","variant","onClick","color","gridTemplateColumns","alignItems","tokenImg","width","amount","fontWeight","BalanceMsg","label","tokenImgSrc","src","alt","WalletBalance","token","image","address","name","tokenBalance","useTokenBalance","formattedTokenBalance","parseFloat","formatUnits","StakeForm","tokenAddress","notifications","useNotifications","useState","setAmount","chainId","abi","TokenFarm","tokenFarmAddress","networkMapping","String","constants","AddressZero","tokenFarmInterface","utils","Interface","tokenFarmContract","Contract","erc20ABI","ERC20","erc20Interface","erc20Contract","useContractFunction","transactionName","approveErc20Send","send","approveAndStakeErc20State","state","stakeSend","stakeState","amountToStake","setAmountToStake","useEffect","status","setState","approveAndStake","useStakeTokens","isMining","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokenSuccess","setShowStakeTokenSuccess","handleCloseSnack","filter","notification","type","length","Input","onChange","event","newAmount","target","value","Number","console","log","amountAsWei","parseEther","toString","size","disabled","CircularProgress","Snackbar","open","autoHideDuration","onClose","Alert","severity","UnStakeForm","unstakeSend","UnStake","mystate","useUnStakeTokens","isMiningUnstake","ContractBalance","useContractCall","method","args","tabContent","flexDirection","box","backgroundColor","borderRadius","header","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","Box","TabContext","TabList","newValue","parseInt","aria-label","map","index","Tab","TabPanel","title","palette","common","white","textAlign","Main","networkName","error","helperConfig","stringChainId","dappTokenAddress","wethTokenAddress","brownieConfig","dapp","eth","App","DAppProvider","config","supportedChains","ChainId","Kovan","expirationPeriod","checkInterval","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.520c98f0.chunk.js","sourcesContent":["import { Button, makeStyles } from \"@material-ui/core\"\nimport { useEthers } from \"@usedapp/core\"\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: theme.spacing(4),\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        gap: theme.spacing(1)\n    },\n}))\n\n\nexport const Header = () => {\n    const classes = useStyles()\n\n    const { account, activateBrowserWallet, deactivate } = useEthers()\n\n    const isConnected = account !== undefined\n\n    return (\n        <div className={classes.container}>\n            {isConnected ? (\n                <Button variant=\"contained\" onClick={deactivate}>\n                    Disconnect\n                </Button>\n            ) : (\n                <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={() => activateBrowserWallet()}\n                >\n                    Connect\n                </Button>\n            )}\n        </div>\n    )\n}\n\n","export default __webpack_public_path__ + \"static/media/dapp.70067729.png\";","export default __webpack_public_path__ + \"static/media/eth.4aa4d7e0.png\";","import { makeStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\"\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    }\n}))\n\ninterface BalanceMsgProps {\n    label: string\n    amount: number\n    tokenImgSrc: string\n}\n\nexport const BalanceMsg = ({ label, amount, tokenImgSrc }: BalanceMsgProps) => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.container}>\n            <div>{label}</div>\n            <div className={classes.amount}>{amount}</div>\n            <img className={classes.tokenImg} src={tokenImgSrc} alt=\"token logo\" />\n        </div>\n    )\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components/BalanceMsg\"\n\nexport interface WalletBalanceProps {\n    token: Token\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n    const { image, address, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(address, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`Your ${name} balance`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useStakeTokens } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const { notifications } = useNotifications()\n\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokenSuccess, setShowStakeTokenSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokenSuccess(false)\n    }\n\n    useEffect(() => {\n        if (notifications.filter(\n            (notification) =>\n                notification.type === \"transactionSucceed\" &&\n                notification.transactionName === \"Approve ERC20 transfer\").length > 0) {\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokenSuccess(false)\n        }\n        if (notifications.filter(\n            (notification) =>\n                notification.type === \"transactionSucceed\" &&\n                notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokenSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokenSuccess])\n\n    return (\n        <>\n            <div>\n                <Input\n                    onChange={handleInputChange} />\n                <Button\n                    onClick={handleStakeSubmit}\n                    color=\"primary\"\n                    size=\"large\"\n                    disabled={isMining}>\n                    {isMining ? <CircularProgress size={26} /> : \"Withdraw\"}\n                </Button>\n            </div>\n            <Snackbar\n                open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack}\n            >\n                <Alert onClose={handleCloseSnack} severity=\"success\">\n                    ERC-20 token transfer approved! Now approve the 2nd transaction.\n                </Alert>\n            </Snackbar>\n            <Snackbar\n                open={showStakeTokenSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack}>\n                <Alert onClose={handleCloseSnack} severity=\"success\">\n                    Tokens Staked!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n    // approve\n    const { send: approveErc20Send, state: approveAndStakeErc20State } =\n        useContractFunction(erc20Contract, \"approve\", {\n            transactionName: \"Approve ERC20 transfer\",\n        })\n    const approveAndStake = (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n    // stake\n    const { send: stakeSend, state: stakeState } =\n        useContractFunction(tokenFarmContract, \"stakeTokens\", {\n            transactionName: \"Stake Tokens\",\n        })\n    const [amountToStake, setAmountToStake] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            stakeSend(amountToStake, tokenAddress)\n        }\n    }, [approveAndStakeErc20State, amountToStake, tokenAddress])\n\n\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            setState(stakeState)\n        } else {\n            setState(approveAndStakeErc20State)\n        }\n    }, [approveAndStakeErc20State, stakeState])\n\n    return { approveAndStake, state }\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useUnStakeTokens } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface UnStakeFormProps {\n    token: Token\n}\n\nexport const UnStakeForm = ({ token }: UnStakeFormProps) => {\n    const { address: tokenAddress, name } = token\n\n    const { UnStake, mystate } = useUnStakeTokens(tokenAddress)\n    const handleUnStakeSubmit = () => {\n        return UnStake()\n    }\n\n\n    console.log(\"here\")\n    console.log(mystate.status)\n    const isMiningUnstake = mystate.status === \"Mining\"\n\n    return (\n        <>\n            <div>\n                <Button\n                    onClick={handleUnStakeSubmit}\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled={isMiningUnstake}>\n                    {isMiningUnstake ? <CircularProgress size={26} /> : \"unStake!!!\"}\n                </Button>\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useUnStakeTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n\n\n    const { send: unstakeSend, state: mystate } =\n        useContractFunction(tokenFarmContract, \"unstakeTokens\", {\n            transactionName: 'Unstake tokens'\n        })\n    const UnStake = () => { unstakeSend(tokenAddress) }\n    return { UnStake, mystate }\n}\n\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface ContractBalanceProps {\n    token: Token\n}\n\nexport const ContractBalance = ({ token }: ContractBalanceProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [tokenBalance] =\n        useContractCall(\n            account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"userBalance\", // Method to be called\n                args: [account], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    console.log(account)\n\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`your ${name} balance in the pool is`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}\n","import { Token } from \"../Main\"\nimport React, { useState } from \"react\"\nimport { Box, makeStyles } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport { Tab } from \"@material-ui/core\"\nimport { WalletBalance } from \"./WalletBalance\"\nimport { StakeForm } from \"./StakeForm\"\nimport { UnStakeForm } from \"./UnStakeForm\"\nimport { ContractBalance } from \"./ContractBalance\"\n\n\ninterface YourWalletProps {\n    supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: theme.spacing(4)\n    },\n    box: {\n        backgroundColor: \"white\",\n        borderRadius: \"25px\"\n    },\n    header: {\n        color: \"white\"\n    }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n    const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedTokenIndex(parseInt(newValue))\n    }\n    const classes = useStyles()\n    return (\n        <Box>\n            <h2 className={classes.header}> deposit and withdraw </h2>\n            <Box className={classes.box}>\n                <TabContext value={selectedTokenIndex.toString()}>\n                    <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                        {supportedTokens.map((token, index) => {\n                            return (\n                                <Tab label={token.name}\n                                    value={index.toString()}\n                                    key={index} />\n                            )\n                        })}\n                    </TabList>\n                    {supportedTokens.map((token, index) => {\n                        return (\n                            <TabPanel value={index.toString()} key={index}>\n                                <div className={classes.tabContent}>\n                                    <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                                    <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                                    <ContractBalance token={supportedTokens[selectedTokenIndex]} />\n                                    <UnStakeForm token={supportedTokens[selectedTokenIndex]} />\n                                </div>\n                            </TabPanel>\n                        )\n                    })}\n                </TabContext>\n            </Box>\n            <h2 className={classes.header}> Dual ETH Strike=4000 Maturity=2022-3-25 </h2>\n            <Box className={classes.box}>\n                <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                <ContractBalance token={supportedTokens[selectedTokenIndex]} />\n                <UnStakeForm token={supportedTokens[selectedTokenIndex]} />\n            </Box>\n        </Box >\n    )\n\n}\n","/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport { useEthers } from \"@usedapp/core\"\nimport helperConfig from \"../helper-config.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants } from \"ethers\"\nimport brownieConfig from \"../brownie-config.json\"\nimport dapp from \"../dapp.png\"\nimport eth from \"../eth.png\"\nimport dai from \"../dai.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { makeStyles } from \"@material-ui/core\"\n\nexport type Token = {\n    image: string\n    address: string\n    name: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(4)\n    }\n}))\n\nexport const Main = () => {\n    // Show token values from the wallet\n    // Get the address of different tokens\n    // Get the balance of the users wallet\n\n    // send the brownie-config to our `src` folder\n    // send the build folder\n    const classes = useStyles()\n    const { chainId, error } = useEthers()\n    const networkName = chainId ? helperConfig[chainId] : \"dev\"\n    let stringChainId = String(chainId)\n    const dappTokenAddress = chainId ? networkMapping[stringChainId][\"DappToken\"][0] : constants.AddressZero\n    const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero // brownie config\n    const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n\n    const supportedTokens: Array<Token> = [\n        {\n            image: dapp,\n            address: dappTokenAddress,\n            name: \"DAPP\"\n        },\n        {\n            image: eth,\n            address: wethTokenAddress,\n            name: \"WETH\"\n        },\n        /*     {\n                image: dai,\n                address: fauTokenAddress,\n                name: \"DAI\"\n            } */\n    ]\n\n    return (<>\n        <h1 className={classes.title}>SNOWMAN</h1>\n        <YourWallet supportedTokens={supportedTokens} />\n    </>)\n}\n","import React from 'react'\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Header } from \"./components/Header\"\nimport { Container } from \"@material-ui/core\"\nimport { Main } from \"./components/Main\"\n\nfunction App() {\n  return (\n    <DAppProvider config={{\n      supportedChains: [ChainId.Kovan],\n      notifications: {\n        expirationPeriod: 1000,\n        checkInterval: 1000\n      }\n    }}>\n      <Header />\n      <Container maxWidth=\"md\">\n        <Main />\n      </Container>\n    </DAppProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}