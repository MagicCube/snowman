{"version":3,"sources":["components/Header.tsx","dapp.png","eth.png","components/BalanceMsg.tsx","components/yourWallet/WalletBalance.tsx","hooks/useUnStakeTokens.ts","components/yourWallet/StakeForm.tsx","hooks/useStakeTokens.ts","components/yourWallet/UnStakeForm.tsx","components/yourWallet/ContractBalance.tsx","components/yourWallet/PlaceBidForm.tsx","hooks/usePlaceBid.ts","components/yourWallet/SellBidForm.tsx","hooks/useSellBid.ts","components/yourWallet/OptionSupply.tsx","components/yourWallet/CancelBidForm.tsx","hooks/useCancelBid.ts","components/yourWallet/ExerciseForm.tsx","components/yourWallet/UnusedPremium.tsx","components/yourWallet/WhenExpiry.tsx","components/yourWallet/UserSize.tsx","components/yourWallet/EthPrice.tsx","components/yourWallet/BestBid.tsx","components/yourWallet/YourWallet.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","display","justifyContent","gap","Header","classes","useEthers","account","activateBrowserWallet","deactivate","isConnected","undefined","className","Button","variant","onClick","color","gridTemplateColumns","alignItems","tokenImg","width","amount","fontWeight","BalanceMsg","label","tokenImgSrc","src","alt","WalletBalance","token","image","address","name","tokenBalance","useTokenBalance","formattedTokenBalance","parseFloat","formatUnits","useUnStakeTokens","tokenAddress","chainId","abi","TokenFarm","tokenFarmAddress","networkMapping","String","constants","AddressZero","tokenFarmInterface","utils","Interface","tokenFarmContract","Contract","useContractFunction","transactionName","unstakeSend","send","UnStake","mystate","state","StakeForm","notifications","useNotifications","useState","setAmount","erc20ABI","ERC20","erc20Interface","erc20Contract","approveErc20Send","approveAndStakeErc20State","stakeSend","stakeState","amountToStake","setAmountToStake","useEffect","status","setState","approveAndStake","useStakeTokens","isMining","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokenSuccess","setShowStakeTokenSuccess","handleCloseSnack","filter","notification","type","length","Input","onChange","event","newAmount","target","value","Number","console","log","amountAsWei","parseEther","toString","size","disabled","CircularProgress","Snackbar","open","autoHideDuration","onClose","Alert","severity","UnStakeForm","isMiningUnstake","ContractBalance","useContractCall","method","args","PlaceBidForm","premium","setPremium","PlaceBidSend","PlaceBid","usePlaceBid","newPremium","SellBidForm","SellBidSend","SellBid","useSellBid","OptionSupply","CancelBidForm","CancelBidSend","CancelBid","useCancelBid","isMiningCancelBid","ExerciseForm","UnusedPremium","WhenExpiry","secondsToExpiry","UserSize","EthPrice","BestBid","tabContent","flexDirection","box","backgroundColor","borderRadius","align","margin","header","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","Box","TabContext","TabList","newValue","parseInt","aria-label","map","index","Tab","TabPanel","title","palette","common","white","textAlign","Main","networkName","error","helperConfig","stringChainId","dappTokenAddress","wethTokenAddress","brownieConfig","dapp","eth","App","DAppProvider","config","supportedChains","ChainId","Kovan","expirationPeriod","checkInterval","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5547596.chunk.js","sourcesContent":["import { Button, makeStyles } from \"@material-ui/core\"\nimport { useEthers } from \"@usedapp/core\"\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: theme.spacing(4),\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        gap: theme.spacing(1)\n    },\n}))\n\n\nexport const Header = () => {\n    const classes = useStyles()\n\n    const { account, activateBrowserWallet, deactivate } = useEthers()\n\n    const isConnected = account !== undefined\n\n    return (\n        <div className={classes.container}>\n            {isConnected ? (\n                <Button variant=\"contained\" onClick={deactivate}>\n                    Disconnect\n                </Button>\n            ) : (\n                <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={() => activateBrowserWallet()}\n                >\n                    Connect\n                </Button>\n            )}\n        </div>\n    )\n}\n\n","export default __webpack_public_path__ + \"static/media/dapp.70067729.png\";","export default __webpack_public_path__ + \"static/media/eth.4aa4d7e0.png\";","import { makeStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\"\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    }\n}))\n\ninterface BalanceMsgProps {\n    label: string\n    amount: number\n    tokenImgSrc: string\n}\n\nexport const BalanceMsg = ({ label, amount, tokenImgSrc }: BalanceMsgProps) => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.container}>\n            <div>{label}</div>\n            <div className={classes.amount}>{amount}</div>\n            <img className={classes.tokenImg} src={tokenImgSrc} alt=\"token logo\" />\n        </div>\n    )\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components/BalanceMsg\"\n\nexport interface WalletBalanceProps {\n    token: Token\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n    const { image, address, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(address, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`Your ${name} balance`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}","import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useUnStakeTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const { send: unstakeSend, state: mystate } =\n        useContractFunction(tokenFarmContract, \"unstakeTokens\", {\n            transactionName: 'Unstake tokens'\n        })\n    const UnStake = () => { unstakeSend(tokenAddress) }\n    return { UnStake, mystate }\n}\n\n","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useStakeTokens } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const { notifications } = useNotifications()\n\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokenSuccess, setShowStakeTokenSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokenSuccess(false)\n    }\n\n    useEffect(() => {\n        if (notifications.filter(\n            (notification) =>\n                notification.type === \"transactionSucceed\" &&\n                notification.transactionName === \"Approve ERC20 transfer\").length > 0) {\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokenSuccess(false)\n        }\n        if (notifications.filter(\n            (notification) =>\n                notification.type === \"transactionSucceed\" &&\n                notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokenSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokenSuccess])\n\n    return (\n        <>\n            <div>\n                <Input\n                    onChange={handleInputChange} />\n                <Button\n                    onClick={handleStakeSubmit}\n                    color=\"primary\"\n                    size=\"large\"\n                    disabled={isMining}>\n                    {isMining ? <CircularProgress size={26} /> : \"Deposit\"}\n                </Button>\n            </div>\n            <Snackbar\n                open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack}\n            >\n                <Alert onClose={handleCloseSnack} severity=\"success\">\n                    ERC-20 token transfer approved! Now approve the 2nd transaction.\n                </Alert>\n            </Snackbar>\n            <Snackbar\n                open={showStakeTokenSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack}>\n                <Alert onClose={handleCloseSnack} severity=\"success\">\n                    Tokens Staked!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n    // approve\n    const { send: approveErc20Send, state: approveAndStakeErc20State } =\n        useContractFunction(erc20Contract, \"approve\", {\n            transactionName: \"Approve ERC20 transfer\",\n        })\n    const approveAndStake = (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n    // stake\n    const { send: stakeSend, state: stakeState } =\n        useContractFunction(tokenFarmContract, \"stakeTokens\", {\n            transactionName: \"Stake Tokens\",\n        })\n    const [amountToStake, setAmountToStake] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            stakeSend(amountToStake, tokenAddress)\n        }\n    }, [approveAndStakeErc20State, amountToStake, tokenAddress])\n\n\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            setState(stakeState)\n        } else {\n            setState(approveAndStakeErc20State)\n        }\n    }, [approveAndStakeErc20State, stakeState])\n\n    return { approveAndStake, state }\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useUnStakeTokens } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface UnStakeFormProps {\n    token: Token\n}\n\nexport const UnStakeForm = ({ token }: UnStakeFormProps) => {\n    const { address: tokenAddress, name } = token\n\n    const { UnStake, mystate } = useUnStakeTokens(tokenAddress)\n    const handleUnStakeSubmit = () => {\n        return UnStake()\n    }\n\n\n    //console.log(mystate.status)\n    const isMiningUnstake = mystate.status === \"Mining\"\n\n    return (\n        <>\n            <div>\n                <Button\n                    onClick={handleUnStakeSubmit}\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled={isMiningUnstake}>\n                    {isMiningUnstake ? <CircularProgress size={26} /> : \"Withdraw from pool\"}\n                </Button>\n            </div>\n        </>\n    )\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface ContractBalanceProps {\n    token: Token\n}\n\nexport const ContractBalance = ({ token }: ContractBalanceProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [tokenBalance] =\n        useContractCall(\n            account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"userBalance\", // Method to be called\n                args: [account], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    //console.log(\"account:\", account)\n    //debugger;\n\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`your USDx balance in the pool is`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { usePlaceBid } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface PlaceBidFormProps {\n    token: Token\n}\n\n\nexport const PlaceBidForm = ({ token }: PlaceBidFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const { notifications } = useNotifications()\n\n    const [amount, setAmount] = useState<number>(0)\n    const [premium, setPremium] = useState<number>(0)\n\n    const { PlaceBid, mystate } = usePlaceBid(amount, premium)\n    const handlePlaceBid = () => {\n        return PlaceBid()\n    }\n\n\n    const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = (event.target.value === \"\") ? 0 : Number(event.target.value)\n        // TODO: @henry add .....\n        setAmount(newAmount)\n        console.log('PlaceBidForm.newAmount', newAmount)\n    }\n    const handlePremiumChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newPremium = event.target.value === \"\" ? 0 : Number(event.target.value)\n        setPremium(newPremium)\n        console.log('PlaceBidForm.newPremium', newPremium)\n    }\n\n\n\n    console.log(mystate)\n    const isMiningUnstake = mystate.status === \"Mining\"\n\n    return (\n        <>\n            <div>\n                <Input\n                    onChange={handleAmountChange} />\n                <Input\n                    onChange={handlePremiumChange} />\n                <Button\n                    onClick={handlePlaceBid}\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled={isMiningUnstake}>\n                    {isMiningUnstake ? <CircularProgress size={26} /> : \"input price/option and total premium\"}\n                </Button>\n            </div>\n        </>\n    )\n}","import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const usePlaceBid = (amount: number, premium: number) => {\n\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const { send: PlaceBidSend, state: mystate } =\n        useContractFunction(tokenFarmContract, \"placeBid\", {\n            transactionName: 'Place bid'\n        })\n    const PlaceBid = () => { PlaceBidSend(utils.parseEther(amount.toString()), utils.parseEther(premium.toString())) }\n    console.log(amount)\n\n    //debugger;\n    return { PlaceBid, mystate }\n}\n\n","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useSellBid } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface SellBidFormProps {\n    token: Token\n}\n\n\nexport const SellBidForm = ({ token }: SellBidFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const { notifications } = useNotifications()\n\n    const [amount, setAmount] = useState<number>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? 0 : Number(event.target.value)\n        setAmount(newAmount)\n        console.log('SellBidForm.newAmount', newAmount)\n    }\n\n    const amountAsWei = utils.parseEther(amount.toString())\n    const { SellBid, mystate } = useSellBid(amountAsWei.toString())\n    const handleSellBid = () => {\n        return SellBid()\n    }\n\n    console.log(mystate)\n    const isMiningUnstake = mystate.status === \"Mining\"\n\n\n\n    return (\n        <>\n            <div>\n                <Input\n                    onChange={handleInputChange} />\n                <Button\n                    onClick={handleSellBid}\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled={isMiningUnstake}>\n                    {isMiningUnstake ? <CircularProgress size={26} /> : \"Invest\"}\n                </Button>\n            </div>\n        </>\n    )\n}","import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useSellBid = (amount: string) => {\n\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const { send: SellBidSend, state: mystate } =\n        useContractFunction(tokenFarmContract, \"sellBid\", {\n            transactionName: 'Sell bid'\n        })\n    const SellBid = () => { SellBidSend(amount) }\n    return { SellBid, mystate }\n}\n\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface OptionSupplyProps {\n    token: Token\n}\n\nexport const OptionSupply = ({ token }: OptionSupplyProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [tokenBalance] =\n        useContractCall(\n            //account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"getSupply\", // Method to be called\n                args: [], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    //console.log(\"supply:\", tokenBalance / 1e18)\n    //debugger;\n\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`max USDX supply is`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useCancelBid } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface CancelBidFormProps {\n    token: Token\n}\n\nexport const CancelBidForm = ({ token }: CancelBidFormProps) => {\n    const { address: tokenAddress, name } = token\n\n    const { CancelBid, mystate } = useCancelBid(tokenAddress)\n    const handleCancelBidSubmit = () => {\n        return CancelBid()\n    }\n\n\n    console.log(mystate)\n    const isMiningCancelBid = mystate.status === \"Mining\"\n\n    return (\n        <>\n            <div>\n                <Button\n                    onClick={handleCancelBidSubmit}\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled={isMiningCancelBid}>\n                    {isMiningCancelBid ? <CircularProgress size={26} /> : \"Cancel bid\"}\n                </Button>\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useCancelBid = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const { send: CancelBidSend, state: mystate } =\n        useContractFunction(tokenFarmContract, \"cancelBid\", {\n            transactionName: 'Cancel all your bids'\n        })\n    const CancelBid = () => { CancelBidSend() }\n    return { CancelBid, mystate }\n}\n\n","import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useUnStakeTokens } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface ExerciseFormProps {\n    token: Token\n}\n\nexport const ExerciseForm = ({ token }: ExerciseFormProps) => {\n    const { address: tokenAddress, name } = token\n\n    const { UnStake, mystate } = useUnStakeTokens(tokenAddress)\n    const handleUnStakeSubmit = () => {\n        return UnStake()\n    }\n\n\n    //console.log(mystate.status)\n    const isMiningUnstake = mystate.status === \"Mining\"\n\n    return (\n        <>\n            <div>\n                <Button\n                    onClick={handleUnStakeSubmit}\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled={isMiningUnstake}>\n                    {isMiningUnstake ? <CircularProgress size={26} /> : \"Exercise contract\"}\n                </Button>\n            </div>\n        </>\n    )\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface UnusedPremiumProps {\n    token: Token\n}\n\nexport const UnusedPremium = ({ token }: UnusedPremiumProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [tokenBalance] =\n        useContractCall(\n            account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"userUnusedPremium\", // Method to be called\n                args: [account], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    //console.log(\"account:\", account)\n    //debugger;\n\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`premium of your order in the market is`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface WhenExpiryProps {\n    token: Token\n}\n\nexport const WhenExpiry = ({ token }: WhenExpiryProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [secondsToExpiry] =\n        useContractCall(\n            //account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"SecondToExpiry\", // Method to be called\n                args: [], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    //console.log(\"account:\", secondsToExpiry)\n    //debugger;\n\n    return (<BalanceMsg\n        label={`hours before expiry`}\n        tokenImgSrc={image}\n        amount={secondsToExpiry / 60 / 60} />)\n\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface UserSizeProps {\n    token: Token\n}\n\nexport const UserSize = ({ token }: UserSizeProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [tokenBalance] =\n        useContractCall(\n            account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"userSize\", // Method to be called\n                args: [account], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    //console.log(\"user:\", account)\n    //debugger;\n\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`size you already traded`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface EthPriceProps {\n    token: Token\n}\n\nexport const EthPrice = ({ token }: EthPriceProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [tokenBalance] =\n        useContractCall(\n            //account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"getETH\", // Method to be called\n                args: [], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    //console.log(\"account:\", account)\n    //debugger;\n\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`ETH price is`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}\n","import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useContractCall } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../../chain-info/contracts/TokenFarm.json\"\nimport networkMapping from \"../../chain-info/deployments/map.json\"\n\nexport interface BestBidProps {\n    token: Token\n}\n\nexport const BestBid = ({ token }: BestBidProps) => {\n    // address\n    // abi\n    // chainId\n    const { chainId, account } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const { image, address, name } = token\n\n    const [tokenBalance] =\n        useContractCall(\n            //account &&\n            tokenFarmAddress && {\n                abi: tokenFarmInterface, // ABI interface of the called contract\n                address: tokenFarmAddress, // On-chain address of the deployed contract\n                method: \"getBestBid\", // Method to be called\n                args: [], // Method arguments - address to be checked for balance\n            }\n        ) ?? [];\n    console.log(\"heyy:\", tokenBalance)\n    //debugger;\n\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    return (<BalanceMsg\n        label={`Best bid is`}\n        tokenImgSrc={image}\n        amount={formattedTokenBalance} />)\n}\n","import { Token } from \"../Main\"\nimport React, { useState } from \"react\"\nimport { Box, makeStyles } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport { Tab } from \"@material-ui/core\"\nimport { WalletBalance } from \"./WalletBalance\"\nimport { StakeForm } from \"./StakeForm\"\nimport { UnStakeForm } from \"./UnStakeForm\"\nimport { ContractBalance } from \"./ContractBalance\"\nimport { platform } from \"os\"\nimport { PlaceBidForm } from \"./PlaceBidForm\"\nimport { SellBidForm } from \"./SellBidForm\"\nimport { OptionSupply } from \"./OptionSupply\"\nimport { CancelBidForm } from \"./CancelBidForm\"\nimport { ExerciseForm } from \"./ExerciseForm\"\nimport { UnusedPremium } from \"./UnusedPremium\"\nimport { WhenExpiry } from \"./WhenExpiry\"\nimport { UserSize } from \"./UserSize\"\nimport { EthPrice } from \"./EthPrice\"\nimport { BestBid } from \"./BestBid\"\n\n\n\n\ninterface YourWalletProps {\n    supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: theme.spacing(4)\n    },\n    box: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        backgroundColor: \"white\",\n        borderRadius: \"25px\",\n        align: \"center\",\n        justifyContent: 'center',\n        margin: 'auto'\n    },\n    header: {\n        color: \"white\"\n    }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n    const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedTokenIndex(parseInt(newValue))\n    }\n    const classes = useStyles()\n    return (\n        <Box>\n\n            <h2 className={classes.header}> Deposit USDx to trade </h2>\n            <Box className={classes.box}>\n                <TabContext value={selectedTokenIndex.toString()}>\n                    <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                        {supportedTokens.map((token, index) => {\n                            return (\n                                <Tab label={token.name}\n                                    value={index.toString()}\n                                    key={index} />\n                            )\n                        })}\n                    </TabList>\n                    {supportedTokens.map((token, index) => {\n                        return (\n                            <TabPanel value={index.toString()} key={index}>\n                                <div className={classes.tabContent}>\n                                    <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                                    <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                                    <ContractBalance token={supportedTokens[selectedTokenIndex]} />\n                                    <UnStakeForm token={supportedTokens[selectedTokenIndex]} />\n                                </div>\n                            </TabPanel>\n                        )\n                    })}\n                </TabContext>\n            </Box>\n            <h2 className={classes.header}> Buy Dual ETH Strike=3300</h2>\n            <Box>\n                <Box className={classes.box}>\n                    <div className={classes.tabContent}>\n                        <BestBid token={supportedTokens[selectedTokenIndex]} />\n                        <SellBidForm token={supportedTokens[selectedTokenIndex]} />\n                        <OptionSupply token={supportedTokens[selectedTokenIndex]} />\n                        <ExerciseForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                </Box>\n            </Box>\n            <h5 className={classes.header}> </h5>\n            <Box>\n                <Box className={classes.box}>\n                    <div className={classes.tabContent}>\n                        <WhenExpiry token={supportedTokens[selectedTokenIndex]} />\n                        <EthPrice token={supportedTokens[selectedTokenIndex]} />\n                        <UserSize token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                </Box>\n            </Box>\n            <h3 className={classes.header}> market maker portal</h3>\n            <Box>\n                <Box className={classes.box}>\n                    <div className={classes.tabContent}>\n                        <PlaceBidForm token={supportedTokens[selectedTokenIndex]} />\n                        <UnusedPremium token={supportedTokens[selectedTokenIndex]} />\n                        <CancelBidForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                </Box>\n            </Box>\n\n        </Box >\n    )\n\n}\n","/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport { useEthers } from \"@usedapp/core\"\nimport helperConfig from \"../helper-config.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants } from \"ethers\"\nimport brownieConfig from \"../brownie-config.json\"\nimport dapp from \"../dapp.png\"\nimport eth from \"../eth.png\"\nimport dai from \"../dai.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { makeStyles } from \"@material-ui/core\"\n\nexport type Token = {\n    image: string\n    address: string\n    name: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(4)\n    }\n}))\n\nexport const Main = () => {\n    // Show token values from the wallet\n    // Get the address of different tokens\n    // Get the balance of the users wallet\n\n    // send the brownie-config to our `src` folder\n    // send the build folder\n    const classes = useStyles()\n    const { chainId, error } = useEthers()\n    const networkName = chainId ? helperConfig[chainId] : \"dev\"\n    let stringChainId = String(chainId)\n    const dappTokenAddress = chainId ? networkMapping[stringChainId][\"DappToken\"][0] : constants.AddressZero\n    const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero // brownie config\n    const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n\n    const supportedTokens: Array<Token> = [\n        {\n            image: dapp,\n            address: dappTokenAddress,\n            name: \"USDx\"\n        },\n        {\n            image: eth,\n            address: wethTokenAddress,\n            name: \"WETH\"\n        },\n        /*     {\n                image: dai,\n                address: fauTokenAddress,\n                name: \"DAI\"\n            } */\n    ]\n\n    return (<>\n        <h1 className={classes.title}>SNOWMAN</h1>\n        <YourWallet supportedTokens={supportedTokens} />\n    </>)\n}\n","import React from 'react'\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Header } from \"./components/Header\"\nimport { Container } from \"@material-ui/core\"\nimport { Main } from \"./components/Main\"\n\nfunction App() {\n  return (\n    <DAppProvider config={{\n      supportedChains: [ChainId.Kovan],\n      notifications: {\n        expirationPeriod: 1000,\n        checkInterval: 1000\n      }\n    }}>\n      <Header />\n      <Container maxWidth=\"md\">\n        <Main />\n      </Container>\n    </DAppProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}